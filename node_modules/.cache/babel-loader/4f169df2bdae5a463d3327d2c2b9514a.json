{"ast":null,"code":"var _jsxFileName = \"/Users/tiberiu/Documents/web-projects/learningJS/TheOdinProject/memory-card/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport uniqid from 'uniqid';\nimport Card from './components/Card';\nimport Navigation from './components/Navigation';\nimport { useEffect, useState } from 'react';\nimport GameOver from './components/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initalCards = [{\n    title: \"Quattro Stagioni\",\n    imgSource: \"quattroStagioni\",\n    id: uniqid()\n  }, {\n    title: \"Quattro Formagi\",\n    imgSource: \"quattroFormagi\",\n    id: uniqid()\n  }, {\n    title: \"Fish Pizza\",\n    imgSource: \"fishPizza\",\n    id: uniqid()\n  }, {\n    title: \"Pepperoni Pizza\",\n    imgSource: \"pepperoniPizza\",\n    id: uniqid()\n  }, {\n    title: \"Italian Pizza\",\n    imgSource: \"italianPizza\",\n    id: uniqid()\n  }, {\n    title: \"Low Res Pizza\",\n    imgSource: \"lowResPizza\",\n    id: uniqid()\n  }, {\n    title: \"Toxic Pizza\",\n    imgSource: \"toxicPizza\",\n    id: uniqid()\n  }, {\n    title: \"Onion Pizza\",\n    imgSource: \"onionPizza\",\n    id: uniqid()\n  }];\n  const [cards, setCards] = useState(initalCards);\n  const [cardsClicked, setCardsClicked] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [bestScoreList, setBestScoreList] = useState([]);\n  useEffect(() => {\n    if (score === 8) {\n      gameOver();\n    }\n  }, [score]);\n\n  const cardClicked = card => {\n    if (cardsClicked.includes(card)) {\n      gameOver();\n      return;\n    }\n\n    setCardsClicked([...cardsClicked].concat(card));\n    setScore(score + 1);\n    setCards([...cards].sort((a, b) => 0.5 - Math.random()));\n  };\n\n  const newGame = () => {\n    setIsGameOver(false);\n    setCards(initalCards);\n    setCardsClicked([]);\n    setScore(0);\n  };\n\n  const gameOver = () => {\n    setCards([]);\n    setIsGameOver(true);\n\n    if (Math.max(...bestScoreList) > score) {\n      return;\n    } else {\n      setBestScoreList([...bestScoreList].concat(score));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      score: score,\n      bestScoreList: bestScoreList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), isGameOver ? /*#__PURE__*/_jsxDEV(GameOver, {\n      newGame: newGame,\n      title: score < 8 ? 'Game Over' : 'Congrats!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mainContainer\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        title: card.title,\n        imgSource: card.imgSource,\n        cardClicked: cardClicked\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"LAZbSHdtQkO6Hr6TIXVCTfKWIL4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tiberiu/Documents/web-projects/learningJS/TheOdinProject/memory-card/src/App.js"],"names":["uniqid","Card","Navigation","useEffect","useState","GameOver","App","initalCards","title","imgSource","id","cards","setCards","cardsClicked","setCardsClicked","score","setScore","isGameOver","setIsGameOver","bestScoreList","setBestScoreList","gameOver","cardClicked","card","includes","concat","sort","a","b","Math","random","newGame","max","map"],"mappings":"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","sourcesContent":["import './App.css';\nimport uniqid from 'uniqid'\nimport Card from './components/Card';\nimport Navigation from './components/Navigation';\nimport { useEffect, useState } from 'react';\nimport GameOver from './components/GameOver';\n\nfunction App() {\n  const initalCards = [\n    {title: \"Quattro Stagioni\", imgSource: \"quattroStagioni\", id: uniqid()},\n    {title: \"Quattro Formagi\", imgSource: \"quattroFormagi\", id: uniqid()},\n    {title: \"Fish Pizza\", imgSource: \"fishPizza\", id: uniqid()},\n    {title: \"Pepperoni Pizza\", imgSource: \"pepperoniPizza\", id: uniqid()},\n    {title: \"Italian Pizza\", imgSource: \"italianPizza\", id: uniqid()},\n    {title: \"Low Res Pizza\", imgSource: \"lowResPizza\", id: uniqid()},\n    {title: \"Toxic Pizza\", imgSource: \"toxicPizza\", id: uniqid()},\n    {title: \"Onion Pizza\", imgSource: \"onionPizza\", id: uniqid()},\n  ]\n  const [cards, setCards] = useState(initalCards);\n\n  const [cardsClicked, setCardsClicked] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [bestScoreList, setBestScoreList] = useState([]);\n\n  useEffect(() => {\n    if(score === 8) {\n      gameOver();\n    }\n  }, [score]);\n\n  const cardClicked = (card) => {\n    if(cardsClicked.includes(card)) {\n      gameOver();\n      return;\n    }\n\n    setCardsClicked([...cardsClicked].concat(card))\n    setScore(score + 1);\n\n    setCards(\n      [...cards].sort((a,b) => 0.5 - Math.random())\n    )\n  };\n\n  const newGame = () => {\n    setIsGameOver(false);\n    setCards(initalCards);\n    setCardsClicked([]);\n    setScore(0);\n  };\n\n  const gameOver = () => {\n    setCards([]);\n    setIsGameOver(true);\n\n    if(Math.max(...bestScoreList) > score) {\n      return;\n    } else {\n      setBestScoreList([...bestScoreList].concat(score));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navigation score={score} bestScoreList={bestScoreList}/>\n      {isGameOver ? <GameOver newGame={newGame} title={score < 8 ? 'Game Over' : 'Congrats!'}/> : null}\n      <div id=\"mainContainer\">\n          {\n            cards.map(card =>  <Card key={card.id} title={card.title} imgSource={card.imgSource} cardClicked={cardClicked}/>)\n          }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}